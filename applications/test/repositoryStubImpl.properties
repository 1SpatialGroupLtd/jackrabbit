#
# This is the configuration file for the jackrabbit repository test stub.
#

# Stub implementation class
javax.jcr.tck.repository_stub_impl=org.apache.jackrabbit.test.JackrabbitRepositoryStub

# repository name
org.apache.jackrabbit.repository.config=applications/test/repository.xml
org.apache.jackrabbit.repository.name=repo
org.apache.jackrabbit.repository.home=applications/test

# credential configuration
javax.jcr.tck.superuser.name=superuser
javax.jcr.tck.superuser.pwd=
javax.jcr.tck.readwrite.name=user
javax.jcr.tck.readwrite.pwd=
javax.jcr.tck.readonly.name=anonymous
javax.jcr.tck.readonly.pwd=

# global test configuration
javax.jcr.tck.testroot=/testroot
javax.jcr.tck.nodetype=nt:unstructured
javax.jcr.tck.nodename1=foo
javax.jcr.tck.nodename2=bar
javax.jcr.tck.nodename3=foobar
javax.jcr.tck.nodename4=myname
javax.jcr.tck.propertyname1=prop1
javax.jcr.tck.propertyname2=prop2
javax.jcr.tck.workspacename=test

# namespace configuration
javax.jcr.tck.namespaces=test
javax.jcr.tck.namespaces.test=http://www.apache.org/jackrabbit/test

# sample for per test case config overriding
# Test class: AddNodeText
# Test method: testName
javax.jcr.tck.AddNodeTest.testName.nodename1=myname

# ==============================================================================
# JAVAX.JCR CONFIGURATION
# ==============================================================================

# Test class: ItemDefTest
javax.jcr.tck.ItemDefTest.testroot=/

# Test class: ItemReadMethodsTest
javax.jcr.tck.ItemReadMethodsTest.testroot=/

# Test class: NodeReadMethodsTest
javax.jcr.tck.NodeReadMethodsTest.testroot=/

# Test class: PropertyTypeTest
javax.jcr.tck.PropertyTypeTest.testroot=/

# Test class: BinaryPropertyTest
javax.jcr.tck.BinaryPropertyTest.testroot=/

# Test class: BooleanPropertyTest
javax.jcr.tck.BooleanPropertyTest.testroot=/

# Test class: DatePropertyTest
javax.jcr.tck.DatePropertyTest.testroot=/

# Test class: DoublePropertyTest
javax.jcr.tck.DoublePropertyTest.testroot=/

# Test class: LongPropertyTest
javax.jcr.tck.LongPropertyTest.testroot=/

# Test class: NamePropertyTest
javax.jcr.tck.NamePropertyTest.testroot=/

# Test class: PathPropertyTest
javax.jcr.tck.PathPropertyTest.testroot=/

# Test class: ReferencePropertyTest
javax.jcr.tck.ReferencePropertyTest.testroot=/

# Test class: StringPropertyTest
javax.jcr.tck.StringPropertyTest.testroot=/

# Test class: UndefinedPropertyTest
javax.jcr.tck.UndefinedPropertyTest.testroot=/

# Test class: PropertyReadMethodsTest
javax.jcr.tck.PropertyReadMethodsTest.testroot=/

# Test class: NodeIteratorTest
javax.jcr.tck.NodeIteratorTest.testroot=/

# Test class: RepositoryDescriptorTest
javax.jcr.tck.RepositoryDescriptorTest.testroot=/

# Test class: WorkspaceReadMethodsTest
javax.jcr.tck.WorkspaceReadMethodsTest.testroot=/

# Test class: SessionReadMethodsTest
javax.jcr.tck.SessionReadMethodsTest.testroot=/

# Test class: NamespaceRegistryReadMethodsTest
javax.jcr.tck.NamespaceRegistryReadMethodsTest.testroot=/

# Test class: NamespaceRemappingTest
javax.jcr.tck.NamespaceRemappingTest.testroot=/

# ==============================================================================
# JAVAX.JCR.QUERY CONFIGURATION
# ==============================================================================

# Test class: SaveTest
# Test method: testConstraintViolationException
# Specified node type must not allow child nodes.
javax.jcr.tck.SaveTest.testConstraintViolationException.nodetype=nt:query

# Test class: XPathQueryLevel1Test
javax.jcr.tck.XPathQueryLevel1Test.testroot=/testdata/query

# Test class: XPathDocOrderTest
javax.jcr.tck.XPathDocOrderTest.testroot=/testdata/query

# Test class: XPathPosIndexTest
javax.jcr.tck.XPathPosIndexTest.testroot=/testdata/query

# Test class: XPathOrderByTest
javax.jcr.tck.XPathOrderByTest.testroot=/testdata/query

# Test class: XPathSyntaxTest
javax.jcr.tck.XPathSyntaxTest.testroot=/testdata/query

# Test class: SQLQueryLevel1Test
javax.jcr.tck.SQLQueryLevel1Test.testroot=/testdata/query

# Test class: SQLSyntaxTest
javax.jcr.tck.SQLSyntaxTest.testroot=/testdata/query

# Test class: SQLOrderByTest
javax.jcr.tck.SQLOrderByTest.testroot=/testdata/query

# ==============================================================================
# JAVAX.JCR.VERSIONING CONFIGURATION
# ==============================================================================

# nodetye that is versionable. if it is not, an attempt is made to create versionable nodes
# by adding a mix:versionable mixin-type.
# NOTE: javax.jcr.tck.nodetype must define a non-versionable nodetype!
javax.jcr.tck.version.versionableNodeType=test:versionable
javax.jcr.tck.version.propertyValue=aPropertyValue

# testroot for the version package
# the test root must allow versionable and non-versionable nodes being created below
javax.jcr.tck.version.testroot=/testroot

# 3 nodes (nodeName1, nodeName2, nodeName3 with nt=versionableNodeType / nt=nonVersionableNodeType will be cloned to 2nd workspace
# nodename1 > used to persistently create versionable node below testroot
# nodename2 > used to create second versionable node below testroot (used for restore/workspace.restore with uuid-conflict)
# nodename3 > used to persistently create non-versionable node below testroot
javax.jcr.tck.version.nodename1=versionableNodeName1
javax.jcr.tck.version.nodename2=versionableNodeName2
javax.jcr.tck.version.nodename3=nonVersionableNodeName1

# nodename 4: versionabel child-node of the first versionable node with nodeName1 and nodetype 'versionableNodeType'
# used for:
# + creation of a node in the 2nd workspace, that does not exist in the first workspace
# + creation of a node in the 2nd workspace, in order to test uuid-conflicts with Workspace.restore.
# + creation of a sub-node in the default workspace, in order to test uuid-conflicts with Node.restore.
# + NOTE: the nodetype with 'versionableNodeType' must define its children nodes to either have COPY or VERSION
#         OPV behaviour in order to successfully test Node.restore and Workspace.restore with uuid conflict.
javax.jcr.tck.version.nodename4=childNodeName

# path to existing String-properties and a new value for the property, that allows to test the indicated OPV behaviour
javax.jcr.tck.OnParentVersionAbortTest.propertyname1=test:abortOnParentVersionProp
javax.jcr.tck.OnParentVersionComputeTest.propertyname1=test:computeOnParentVersionProp
javax.jcr.tck.OnParentVersionCopyTest.propertyname1=test:copyOnParentVersionProp
javax.jcr.tck.OnParentVersionIgnoreTest.propertyname1=test:ignoreOnParentVersionProp
javax.jcr.tck.OnParentVersionInitializeTest.propertyname1=test:initializeOnParentVersionProp

# config for nodes that show the indicated OPV behaviour:
# nodes are added in order to test the versioning behaviour indicated by the test-class name.
# NOTE:
# - nodename4 is uses as name for the childnode
# - nodetype is used as nodetype name for the childnode
# - the specified child node is created below nodename1 with versionableNodeType
#   the versionableNodeType and/or nodename1 may be overwritten with the individual
#   testclass below.
javax.jcr.tck.OnParentVersionCopyTest.nodename4=test:copyOnParentVersion
javax.jcr.tck.OnParentVersionCopyTest.nodetype=nt:unstructured
javax.jcr.tck.OnParentVersionAbortTest.nodename4=test:abortOnParentVersion
javax.jcr.tck.OnParentVersionAbortTest.nodetype=nt:unstructured

# Test class: MergeNodeTest
javax.jcr.tck.MergeNodeTest.nodetype=test:versionable

