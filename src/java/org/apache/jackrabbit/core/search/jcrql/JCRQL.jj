/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JCRQL.jj */
/*@egen*/options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 5;
  OTHER_AMBIGUITY_CHECK = 2;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;                                                                                                   
}

PARSER_BEGIN(JCRQLParser)
/*
 * Copyright 2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.jackrabbit.core.search.jcrql;

import org.apache.jackrabbit.core.search.Constants;

public class JCRQLParser/*@bgen(jjtree)*/implements JCRQLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJCRQLParserState jjtree = new JJTJCRQLParserState();

/*@egen*/

  private String statement;

  public static void main(String args[]) throws ParseException {
  	JCRQLParser parser = new JCRQLParser(System.in);
  	parser.Statement().dump("");
  }

  private JCRQLParser(String statement) throws ParseException {
  	this.statement = statement;
  }

  public static ASTStatement parse(String statement) throws ParseException {
  	java.io.StringReader sReader = new java.io.StringReader(statement);
  	JCRQLParser parser = new JCRQLParser(sReader);
  	return parser.Statement();
  }

}

PARSER_END(JCRQLParser)


SKIP :
{
  " " | "\r" | "\n"
}


/* KEY WORDS */

TOKEN:
{
  < SELECT: "SELECT" >
| < FROM: "FROM" >
| < LOCATION: "LOCATION" >
| < WHERE: "WHERE" >
| < TEXTSEARCH: "TEXTSEARCH" >
| < ORDER: "ORDER" >
| < BY: "BY" >
| < SCORE: "SCORE" >
| < ASCENDING: "ASCENDING" >
| < DESCENDING: "DESCENDING" >
| < LIKE: "LIKE" >
| < AND: "AND" >
| < OR: "OR" >
| < NOT: "NOT" >
}

/* LITERALS */

TOKEN :
{
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\" ["\\","\"","%","*","_","?"])
      )*
      "\""
  >
}

/*
TOKEN:
{
  < S: (" " | "	" | "\n" | "\r")+ >
}
*/

/* DIGIT */

TOKEN :
{
  < DIGIT: (["0"-"9"]) >
}

/* TRUE, FALSE */

TOKEN:
{
  < TRUE: "true" >
| < FALSE: "false" >
}

/* UUID */

TOKEN:
{
  < UUID:
  	<TIME_LOW> "-" <TIME_MID> "-" <TIME_HIGH_AND_VERSION> "-" <CLOCK_SEQ> "-" <NODE> >
| < #TIME_LOW:
	<HEX_OCTET> <HEX_OCTET> <HEX_OCTET> <HEX_OCTET> >
| < #TIME_MID:
	<HEX_OCTET> <HEX_OCTET> >
| < #TIME_HIGH_AND_VERSION:
	<HEX_OCTET> <HEX_OCTET> >
| < #CLOCK_SEQ:
	<HEX_OCTET> <HEX_OCTET> >
| < #NODE:
	<HEX_OCTET> <HEX_OCTET> <HEX_OCTET> <HEX_OCTET> <HEX_OCTET> <HEX_OCTET> >
| < #HEX_OCTET:
	<HEX_DIGIT> <HEX_DIGIT> >
| < #HEX_DIGIT:
	<DIGIT> | ["a"-"f"] | ["A"-"F"] >
}

/* ISO 8601 */

TOKEN:
{
  < ISO_DATE: <YEAR> "-" <MONTH> "-" <DAY> "T" <HOUR> ":" <MINUTE> ":" <SEC> "." <SEC_FRAC> ("Z" | (("+" | "-") <HOUR> ":" <MINUTE> )) >
| < #YEAR: <DIGIT> <DIGIT> <DIGIT> <DIGIT> >
| < #MONTH: ["0"-"1"] <DIGIT> >
| < #DAY: ["0"-"3"] <DIGIT> >
| < #HOUR: ["0"-"2"] <DIGIT> >
| < #MINUTE: ["0"-"5"] <DIGIT> >
| < #SEC: ["0"-"5"] <DIGIT> >
| < #SEC_FRAC: <DIGIT> <DIGIT> <DIGIT> >
}

/* DOUBLE */

TOKEN:
{
  < DOUBLE:
  	  ( ("-")? (<DIGIT>)+ "." (<DIGIT>)* (<EXP_PART>)? (<TYPE_SUFFIX>)? )
  	| ( ("-")? "." (<DIGIT>)+ (<EXP_PART>)? (<TYPE_SUFFIX>)? )
  	| ( ("-")? (<DIGIT>)+ <EXP_PART> (<TYPE_SUFFIX>)? )
  	| ( ("-")? (<DIGIT>)+ (<EXP_PART>)? <TYPE_SUFFIX> ) >
| < #EXP_PART: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #TYPE_SUFFIX: ["d","D","f","F"] >
}

/* LONG */

TOKEN:
{
  < ULONG: (<DIGIT>)+ (["l","L"])? >
| < LONG: ("-")? <ULONG> >
}

/* OPERATORS */

TOKEN :
{
  < EQ: "=" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "<>" >
}

/*
NCName
See: http://www.w3.org/TR/REC-xml-names/#NT-NCName
*/

TOKEN:
{
	<NCName: (<Letter> | "_") (<NCNameChar>)* >
// |	<SpacedNCName: <NCNameChar> ((~["/", ":", "[", "]", "*", "'", "\"", "|"])* <NCNameChar>)? >
|	<#NCNameChar: <Letter> | <Digit> | "." | "-" | "_" | <CombiningChar> | <Extender> >
|	<#Letter: <BaseChar> | <Ideographic> >

|	<#BaseChar:
		  ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"]
		| ["\u00f8"-"\u00ff"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013e"] | ["\u0141"-"\u0148"]
		| ["\u014a"-"\u017e"] | ["\u0180"-"\u01c3"] | ["\u01cd"-"\u01f0"] | ["\u01f4"-"\u01f5"]
		| ["\u01fa"-"\u0217"] | ["\u0250"-"\u02a8"] | ["\u02bb"-"\u02c1"] | "\u0386" | ["\u0388"-"\u038a"]
		| "\u038c" | ["\u038e"-"\u03a1"] | ["\u03a3"-"\u03ce"] | ["\u03d0"-"\u03d6"] | "\u03da"
		| "\u03dc" | "\u03de" | "\u03e0" | ["\u03e2"-"\u03f3"] | ["\u0401"-"\u040c"] | ["\u040e"-"\u044f"]
		| ["\u0451"-"\u045c"] | ["\u045e"-"\u0481"] | ["\u0490"-"\u04c4"] | ["\u04c7"-"\u04c8"]
		| ["\u04cb"-"\u04cc"] | ["\u04d0"-"\u04eb"] | ["\u04ee"-"\u04f5"] | ["\u04f8"-"\u04f9"]
		| ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05d0"-"\u05ea"] | ["\u05f0"-"\u05f2"]
		| ["\u0621"-"\u063a"] | ["\u0641"-"\u064a"] | ["\u0671"-"\u06b7"] | ["\u06ba"-"\u06be"]
		| ["\u06c0"-"\u06ce"] | ["\u06d0"-"\u06d3"] | "\u06d5" | ["\u06e5"-"\u06e6"] | ["\u0905"-"\u0939"]
		| "\u093d" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098c"] | ["\u098f"-"\u0990"] | ["\u0993"-"\u09a8"]
		| ["\u09aa"-"\u09b0"] | "\u09b2" | ["\u09b6"-"\u09b9"] | ["\u09dc"-"\u09dd"] | ["\u09df"-"\u09e1"]
		| ["\u09f0"-"\u09f1"] | ["\u0a05"-"\u0a0a"] | ["\u0a0f"-"\u0a10"] | ["\u0a13"-"\u0a28"]
		| ["\u0a2a"-"\u0a30"] | ["\u0a32"-"\u0a33"] | ["\u0a35"-"\u0a36"] | ["\u0a38"-"\u0a39"]
		| ["\u0a59"-"\u0a5c"] | "\u0a5e" | ["\u0a72"-"\u0a74"] | ["\u0a85"-"\u0a8b"] | "\u0a8d"
		| ["\u0a8f"-"\u0a91"] | ["\u0a93"-"\u0aa8"] | ["\u0aaa"-"\u0ab0"] | ["\u0ab2"-"\u0ab3"]
		| ["\u0ab5"-"\u0ab9"] | "\u0abd" | "\u0ae0" | ["\u0b05"-"\u0b0c"] | ["\u0b0f"-"\u0b10"]
		| ["\u0b13"-"\u0b28"] | ["\u0b2a"-"\u0b30"] | ["\u0b32"-"\u0b33"] | ["\u0b36"-"\u0b39"]
		| "\u0b3d" | ["\u0b5c"-"\u0b5d"] | ["\u0b5f"-"\u0b61"] | ["\u0b85"-"\u0b8a"]
		| ["\u0b8e"-"\u0b90"] | ["\u0b92"-"\u0b95"] | ["\u0b99"-"\u0b9a"] | "\u0b9c" | ["\u0b9e"-"\u0b9f"]
		| ["\u0ba3"-"\u0ba4"] | ["\u0ba8"-"\u0baa"] | ["\u0bae"-"\u0bb5"] | ["\u0bb7"-"\u0bb9"]
		| ["\u0c05"-"\u0c0c"] | ["\u0c0e"-"\u0c10"] | ["\u0c12"-"\u0c28"] | ["\u0c2a"-"\u0c33"]
		| ["\u0c35"-"\u0c39"] | ["\u0c60"-"\u0c61"] | ["\u0c85"-"\u0c8c"] | ["\u0c8e"-"\u0c90"]
		| ["\u0c92"-"\u0ca8"] | ["\u0caa"-"\u0cb3"] | ["\u0cb5"-"\u0cb9"] | "\u0cde" | ["\u0ce0"-"\u0ce1"]
		| ["\u0d05"-"\u0d0c"] | ["\u0d0e"-"\u0d10"] | ["\u0d12"-"\u0d28"] | ["\u0d2a"-"\u0d39"]
		| ["\u0d60"-"\u0d61"] | ["\u0e01"-"\u0e2e"] | "\u0e30" | ["\u0e32"-"\u0e33"] | ["\u0e40"-"\u0e45"]
		| ["\u0e81"-"\u0e82"] | "\u0e84" | ["\u0e87"-"\u0e88"] | "\u0e8a" | "\u0e8d" | ["\u0e94"-"\u0e97"]
		| ["\u0e99"-"\u0e9f"] | ["\u0ea1"-"\u0ea3"] | "\u0ea5" | "\u0ea7" | ["\u0eaa"-"\u0eab"]
		| ["\u0ead"-"\u0eae"] | "\u0eb0" | ["\u0eb2"-"\u0eb3"] | "\u0ebd" | ["\u0ec0"-"\u0ec4"]
		| ["\u0f40"-"\u0f47"] | ["\u0f49"-"\u0f69"] | ["\u10a0"-"\u10c5"] | ["\u10d0"-"\u10f6"] | "\u1100"
		| ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110b"-"\u110c"] | ["\u110e"-"\u1112"]
		| "\u113c" | "\u113e" | "\u1140" | "\u114c" | "\u114e" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159"
		| ["\u115f"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116d"-"\u116e"]
		| ["\u1172"-"\u1173"] | "\u1175" | "\u119e" | "\u11a8" | "\u11ab" | ["\u11ae"-"\u11af"]
		| ["\u11b7"-"\u11b8"] | "\u11ba" | ["\u11bc"-"\u11c2"] | "\u11eb" | "\u11f0" | "\u11f9"
		| ["\u1e00"-"\u1e9b"] | ["\u1ea0"-"\u1ef9"] | ["\u1f00"-"\u1f15"] | ["\u1f18"-"\u1f1d"]
		| ["\u1f20"-"\u1f45"] | ["\u1f48"-"\u1f4d"] | ["\u1f50"-"\u1f57"] | "\u1f59" | "\u1f5b" | "\u1f5d"
		| ["\u1f5f"-"\u1f7d"] | ["\u1f80"-"\u1fb4"] | ["\u1fb6"-"\u1fbc"] | "\u1fbe" | ["\u1fc2"-"\u1fc4"]
		| ["\u1fc6"-"\u1fcc"] | ["\u1fd0"-"\u1fd3"] | ["\u1fd6"-"\u1fdb"] | ["\u1fe0"-"\u1fec"]
		| ["\u1ff2"-"\u1ff4"] | ["\u1ff6"-"\u1ffc"] | "\u2126" | ["\u212a"-"\u212b"] | "\u212e"
		| ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30a1"-"\u30fa"] | ["\u3105"-"\u312c"]
		| ["\uac00"-"\ud7a3"] >
|	<#Ideographic :    ["\u4e00"-"\u9fa5"] | "\u3007" | ["\u3021"-"\u3029"] >
|	<#CombiningChar :
		  ["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] | ["\u0483"-"\u0486"] | ["\u0591"-"\u05a1"]
		| ["\u05a3"-"\u05b9"] | ["\u05bb"-"\u05bd"] | "\u05bf" | ["\u05c1"-"\u05c2"] | "\u05c4"
		| ["\u064b"-"\u0652"] | "\u0670" | ["\u06d6"-"\u06dc"] | ["\u06dd"-"\u06df"]
		| ["\u06e0"-"\u06e4"] | ["\u06e7"-"\u06e8"] | ["\u06ea"-"\u06ed"] | ["\u0901"-"\u0903"]
		| "\u093c" | ["\u093e"-"\u094c"] | "\u094d" | ["\u0951"-"\u0954"] | ["\u0962"-"\u0963"]
		| ["\u0981"-"\u0983"] | "\u09bc" | "\u09be" | "\u09bf" | ["\u09c0"-"\u09c4"] | ["\u09c7"-"\u09c8"]
		| ["\u09cb"-"\u09cd"] | "\u09d7" | ["\u09e2"-"\u09e3"] | "\u0a02" | "\u0a3c" | "\u0a3e"
		| "\u0a3f" | ["\u0a40"-"\u0a42"] | ["\u0a47"-"\u0a48"] | ["\u0a4b"-"\u0a4d"] | ["\u0a70"-"\u0a71"]
		| ["\u0a81"-"\u0a83"] | "\u0abc" | ["\u0abe"-"\u0ac5"] | ["\u0ac7"-"\u0ac9"] | ["\u0acb"-"\u0acd"]
		| ["\u0b01"-"\u0b03"] | "\u0b3c" | ["\u0b3e"-"\u0b43"] | ["\u0b47"-"\u0b48"] | ["\u0b4b"-"\u0b4d"]
		| ["\u0b56"-"\u0b57"] | ["\u0b82"-"\u0b83"] | ["\u0bbe"-"\u0bc2"] | ["\u0bc6"-"\u0bc8"]
		| ["\u0bca"-"\u0bcd"] | "\u0bd7" | ["\u0c01"-"\u0c03"] | ["\u0c3e"-"\u0c44"] | ["\u0c46"-"\u0c48"]
		| ["\u0c4a"-"\u0c4d"] | ["\u0c55"-"\u0c56"] | ["\u0c82"-"\u0c83"] | ["\u0cbe"-"\u0cc4"]
		| ["\u0cc6"-"\u0cc8"] | ["\u0cca"-"\u0ccd"] | ["\u0cd5"-"\u0cd6"] | ["\u0d02"-"\u0d03"]
		| ["\u0d3e"-"\u0d43"] | ["\u0d46"-"\u0d48"] | ["\u0d4a"-"\u0d4d"] | "\u0d57" | "\u0e31"
		| ["\u0e34"-"\u0e3a"] | ["\u0e47"-"\u0e4e"] | "\u0eb1" | ["\u0eb4"-"\u0eb9"]
		| ["\u0ebb"-"\u0ebc"] | ["\u0ec8"-"\u0ecd"] | ["\u0f18"-"\u0f19"] | "\u0f35" | "\u0f37" | "\u0f39"
		| "\u0f3e" | "\u0f3f" | ["\u0f71"-"\u0f84"] | ["\u0f86"-"\u0f8b"] | ["\u0f90"-"\u0f95"] | "\u0f97"
		| ["\u0f99"-"\u0fad"] | ["\u0fb1"-"\u0fb7"] | "\u0fb9" | ["\u20d0"-"\u20dc"] | "\u20e1"
		| ["\u302a"-"\u302f"] | "\u3099" | "\u309a" >
|	<#Digit:
		  ["0"-"9"] | ["\u0660"-"\u0669"] | ["\u06f0"-"\u06f9"] | ["\u0966"-"\u096f"]
		| ["\u09e6"-"\u09ef"] | ["\u0a66"-"\u0a6f"] | ["\u0ae6"-"\u0aef"] | ["\u0b66"-"\u0b6f"]
		| ["\u0be7"-"\u0bef"] | ["\u0c66"-"\u0c6f"] | ["\u0ce6"-"\u0cef"] | ["\u0d66"-"\u0d6f"]
		| ["\u0e50"-"\u0e59"] | ["\u0ed0"-"\u0ed9"] | ["\u0f20"-"\u0f29"] >
|	<#Extender :
		  "\u00b7" | "\u02d0" | "\u02d1" | "\u0387" | "\u0640" | "\u0e46" | "\u0ec6" | "\u3005"
		| ["\u3031"-"\u3035"] | ["\u309d"-"\u309e"] | ["\u30fc"-"\u30fe"] >

}

/*
QNAME
See: http://www.w3.org/TR/REC-xml-names/#NT-QName
*/

/*
TOKEN :
{
  < QNAME: <PREFIX> (":" <LOCAL_PART>)? >
| < #PREFIX: <NCName> >
| < #LOCAL_PART: <NCName> >
}
*/

/******************************************
 * THE JCRQL LANGUAGE GRAMMAR STARTS HERE *
 ******************************************/

ASTStatement Statement() :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  SelectClause()
  FromClause()
  [ LocationClause() ]
  [ WhereClause() ]
  [ TextsearchClause() ]
  [ OrderClause() ]
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectClause() :
{/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String property;
}
{/*@bgen(jjtree) SelectClause */
  try {
/*@egen*/
  <SELECT> ( "*"
           |
             (
               property = PropertyName() { jjtn000.addProperty(property); }
               ( "," property = PropertyName() { jjtn000.addProperty(property); } )*
             )
           )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String PropertyName()       :
{
  String name = null;
  Token stringLiteral = null;
}
{
  (
    (
      name = QName()
    )
  |
    (
      stringLiteral = <STRING_LITERAL> { name = stringLiteral.image; }
    )
  )
  {
    return name;
  }
}


String QName()       :
{
  String name = "";
  String local = null;
}
{
  name = NCName()
    ( ":" local = NCName() { name += ":"; name += local; } )?

  {
    return name;
  }
}

String NCName()       :
{
  Token t;
}
{
  (
  t = <NCName>
| t = <SELECT>
| t = <FROM>
| t = <LOCATION>
| t = <WHERE>
| t = <TEXTSEARCH>
| t = <ORDER>
| t = <BY>
| t = <SCORE>
| t = <ASCENDING>
| t = <DESCENDING>
| t = <LIKE>
| t = <AND>
| t = <OR>
// NOT cannot be used as NCName
// | <NOT>
  )

  {
    return t.image;
  }
}


void FromClause() :
{/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/
  <FROM> ("*" | (NodeType() ("," NodeType())*))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NodeType() :
{/*@bgen(jjtree) NodeType */
  ASTNodeType jjtn000 = new ASTNodeType(JJTNODETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String name = null;
}
{/*@bgen(jjtree) NodeType */
  try {
/*@egen*/
  name = QName()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.setName(name); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LocationClause() :
{/*@bgen(jjtree) LocationClause */
  ASTLocationClause jjtn000 = new ASTLocationClause(JJTLOCATIONCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String stringLocation = null;
}
{/*@bgen(jjtree) LocationClause */
  try {
/*@egen*/
  <LOCATION>
  (
    stringLocation = ItemPath() { jjtn000.setStringLocation(stringLocation); jjtn000.setType(1); }
    ["/*" { jjtn000.setType(2); } | "//" { jjtn000.setType(3); }]
  |
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setStringLocation(t.image.substring(1, t.image.length()-1)); }
  |
    "/*"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { jjtn000.setStringLocation(""); jjtn000.setType(2); }
  |
    "//"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { jjtn000.setStringLocation(""); jjtn000.setType(3); }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


String ItemPath()       :
{
  String path = "";
  String relPath = null;
}
{
  (
    ("/" { path = "/"; } )? relPath = RelativePath()
  )
  {
    return path + relPath;
  }
}


String RelativePath()       :
{
  String path = null;
  String next = null;
}
{
  (
    path = PathStep() ( "/" next = PathStep() { path += ("/" + next); } )*
  )
  {
    return path;
  }
}


String PathStep()       :
{
  String name = null;
  long index = -1;
  Token t = null;
}
{
  (
    name = QName()
      [ "[" (t = <ULONG> | t = <DIGIT>)
        { try {
            index = Long.parseLong(t.image);
          } catch (NumberFormatException e) {
            throw new ParseException("not a valid index value: " + t.image);
          }
        }
      "]" ]
  )
  {
    StringBuffer sb = new StringBuffer(name);
    if (index > 0) {
      sb.append("[").append(index).append("]");
    }
    return sb.toString();
  }
}

void WhereClause() :
{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/
  <WHERE> Expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr()       :
{}
{
  OrExpr()
}

void OrExpr()       :
{}
{/*@bgen(jjtree) #OrExpr(> 1) */
  {
    ASTOrExpr jjtn001 = new ASTOrExpr(JJTOREXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AndExpr() (<OR> AndExpr())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndExpr()       :
{}
{/*@bgen(jjtree) #AndExpr(> 1) */
  {
    ASTAndExpr jjtn001 = new ASTAndExpr(JJTANDEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpr() ("AND" UnaryExpr())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryExpr()       :
{}
{/*@bgen(jjtree) #NotExpr(true) */
  {
    ASTNotExpr jjtn001 = new ASTNotExpr(JJTNOTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    <NOT> UnaryExpr()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
|
  (
    RelExpr()
  )
}

void RelExpr()       :
{
  String propName;
  int opType;
}
{/*@bgen(jjtree) RelExpr */
  {
    ASTRelExpr jjtn001 = new ASTRelExpr(JJTRELEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    propName = PropertyName() { jjtn001.setProperty(propName); }
    opType = Operation() { jjtn001.setOperationType(opType); }
    Value()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
|
  (
    BracketExpr()
  )
}

void BracketExpr() :
{/*@bgen(jjtree) BracketExpr */
  ASTBracketExpr jjtn000 = new ASTBracketExpr(JJTBRACKETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BracketExpr */
  try {
/*@egen*/
  "(" Expr() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int Operation()       :
{
  Token t = null;
  int type;
}
{
  (
  t = <EQ>   { type = Constants.OPERATION_EQ; }
| t = <GT>   { type = Constants.OPERATION_GT; }
| t = <LT>   { type = Constants.OPERATION_LT; }
| t = <LE>   { type = Constants.OPERATION_LE; }
| t = <GE>   { type = Constants.OPERATION_GE; }
| t = <NE>   { type = Constants.OPERATION_NE; }
| t = <LIKE> { type = Constants.OPERATION_LIKE; }
  )
  {
    return type;
  }
}

void Value() :
{/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  String value;
}
{/*@bgen(jjtree) Value */
  try {
/*@egen*/
  (
  t = <DOUBLE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/           { jjtn000.setType(Constants.TYPE_DOUBLE); jjtn000.setValue(t.image); }
| t = <LONG>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/             { jjtn000.setType(Constants.TYPE_LONG);   jjtn000.setValue(t.image); }
| t = <DIGIT>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/            { jjtn000.setType(Constants.TYPE_LONG);   jjtn000.setValue(t.image); }
| t = <ULONG>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/            { jjtn000.setType(Constants.TYPE_LONG);   jjtn000.setValue(t.image); }
| t = <TRUE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/             { jjtn000.setType(Constants.TYPE_STRING); jjtn000.setValue(t.image); }
| t = <FALSE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/            { jjtn000.setType(Constants.TYPE_STRING); jjtn000.setValue(t.image); }
| value = ItemPath()/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/     { jjtn000.setType(Constants.TYPE_STRING); jjtn000.setValue(value); }
| t = <UUID>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/             { jjtn000.setType(Constants.TYPE_STRING); jjtn000.setValue(t.image); }
| t = <ISO_DATE>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/         { jjtn000.setType(Constants.TYPE_TIMESTAMP);   jjtn000.setValue(t.image); }
| t = <STRING_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/   { jjtn000.setType(Constants.TYPE_STRING); jjtn000.setValue(t.image.substring(1, t.image.length()-1)); }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TextsearchClause() :
{/*@bgen(jjtree) TextsearchClause */
  ASTTextsearchClause jjtn000 = new ASTTextsearchClause(JJTTEXTSEARCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) TextsearchClause */
  try {
/*@egen*/
  <TEXTSEARCH> t = <STRING_LITERAL>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { jjtn000.setQuery(t.image.substring(1, t.image.length()-1)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OrderClause() :
{/*@bgen(jjtree) OrderClause */
  ASTOrderClause jjtn000 = new ASTOrderClause(JJTORDERCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String prop;
}
{/*@bgen(jjtree) OrderClause */
  try {
/*@egen*/
  <ORDER> <BY>
      (
        prop = PropertyName() { jjtn000.addProperty(prop); }
        ("," PropertyName() { jjtn000.addProperty(prop); } )*
      )
    |
      (
        <SCORE>
      )
    [ <ASCENDING> { jjtn000.setAscending(true); }  | <DESCENDING> { jjtn000.setAscending(false); } ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

